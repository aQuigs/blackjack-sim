# Cursor Rules for blackjack-sim

## Process & Workflow
- ALWAYS run `pre-commit run --all-files` after making any code changes
- Do not consider a change complete until all pre-commit hooks pass (tests, lint, type checks, coverage)
- If pre-commit fails, fix issues and rerun until it passes
- When pre-commit fails due to missing test coverage, automatically add/update tests without asking
- Don't ever pip install directly - use requirements.txt
- Make changes file by file and provide all edits in a single chunk
- Update .cursorrules to help remember context of your mistakes

## Communication
- Never use apologies
- Don't summarize changes made
- Don't ask for confirmation of information already provided
- Don't suggest updates when no modifications are needed
- Don't show current implementation unless specifically requested
- Don't invent changes other than what's explicitly requested
- Always provide links to real files, not context generated files

## Code Style & Quality
- Use descriptive, explicit variable names over short, ambiguous ones
- Adhere to existing coding style for consistency
- Use empty lines to separate logical sections (preserve existing ones)
- Replace hardcoded values with named constants
- Don't use uppercase std types (e.g., use `list` not `List`)
- Implement robust error handling and logging
- Consider edge cases and include assertions to validate assumptions
- Always verify information before presenting it

## Testing Philosophy: Testing Without Mocks

### Core Principles
- No mocks/stubs for internal code (only for network, filesystem, DB, 3rd-party APIs)
- All tests are narrow, state-based, and sociable
- Use real dependencies, not test doubles, for internal code
- **CRITICAL: All tests must invoke the codebase from the top-level entrypoint. Never instantiate classes or call internal methods directly**
- Coverage must not fall below 90%
- Test names reflect externally-visible behavior
- Verify all new test generation with pytest before calling it successful

### Quick Checklist
- [ ] No mocks/stubs for internal code
- [ ] All tests are narrow, state-based, and sociable
- [ ] Use real dependencies, not test doubles
- [ ] Test helpers/factories used for setup
- [ ] All public interfaces have error/edge case tests
- [ ] Coverage ≥ 90%
- [ ] Test names reflect externally-visible behavior

### Definitions
- **Internal code**: Any code in this repository or under your direct control
- **External dependency**: Network, filesystem, database, or third-party APIs/libraries

### Examples
- ✅ Good: `assert game.score() == 21` (state-based, externally-visible)
- ❌ Bad: `mock_player.assert_called_with('hit')` (interaction-based, mocks internal code)

### Patterns

#### Logic Code
- Prefer pure functions and immutable objects
- For mutable objects, provide observable state (getters or events)
- Wrap third-party libraries in your own code
- All classes should have constructors with sensible defaults
- Use dependency methods in assertions when behavior isn't relevant

#### Infrastructure Code
- Wrap external systems in single-purpose classes
- Provide `createNull()` or equivalent factory for infrastructure wrappers
- Nullables must be production code and testable
- Allow nullables to be configured with named, optional parameters
- Provide output tracking (events/logs) for infrastructure that writes
- Provide methods to simulate events for infrastructure that responds to events

#### Architectural Patterns
- Inject real dependencies (not test doubles) into unit under test
- Structure application with logic and infrastructure as peers under application layer
- Application layer coordinates logic and infrastructure (Logic Sandwich)
- Constructors must not perform significant work
- Use helper functions/factories in tests for signature shielding

#### Observability & Output Tracking
- All logic code must support output tracking via event log and structured results
- Event log records all externally-visible events, actions, and outcomes
- Structured results available for each top-level request
- Tests assert only on externally-visible behavior using outputs
- Tests interact only through public interfaces
- No test may manipulate internal state or methods

#### Infrastructure/Nullability Pattern ("Fake-It-Once-You-Make-It")
- Single production constructor for main case
- Clear factory/classmethod for nullability (e.g., `create_null`)
- Avoid hacks - use constructor and public API
- Null/configurable path must be real, documented, production feature
- Required for all infrastructure wrappers to support mockless testing

### Test Setup and Maintenance
- Main test suite: narrow, sociable tests
- Use helper functions and test-specific factories
- Ensure easy testing of edge cases, error conditions, timeouts
- Some production code needed for tests is acceptable and must be maintained
- Sociable tests may cause multiple failures for single bug (expected)

## Context Awareness
- Check context generated file for current file contents and implementations
