# Cursor Rules for blackjack-sim

## Process & Workflow
- ALWAYS run `pre-commit run --all-files` after making any code changes.
- Do not consider a change complete until all pre-commit hooks pass (including tests, lint, type checks, and coverage).
- If pre-commit fails, fix the issues and rerun until it passes.
- Communicate this requirement in all future code reviews and automation.
- Also be willing to update .cursorrules to help remember context.
- Don't ever pip install anything directly. Use requirements.txt.
- Make changes file by file and give me a chance to spot mistakes.
- Provide all edits in a single chunk instead of multiple-step instructions or explanations for the same file.
- When pre-commit fails due to missing test coverage, automatically add or update tests to cover the missing lines/files, especially for new or changed code, without asking for confirmation.

## Communication
- Never use apologies.
- Avoid giving feedback about understanding in comments or documentation.
- Don't summarize changes made.
- Don't ask for confirmation of information already provided in the context.
- Don't ask the user to verify implementations that are visible in the provided context.
- Don't suggest updates or changes to files when there are no actual modifications needed.
- Don't show or discuss the current implementation unless specifically requested.
- Don't invent changes other than what's explicitly requested. If you have clever ideas, ask.
- Always provide links to the real files, not the context generated file.

## Code Style & Readability
- Prefer descriptive, explicit variable names over short, ambiguous ones to enhance code readability.
- Adhere to the existing coding style in the project for consistency.
- Use empty lines to separate logical sections of code for improved readability, especially in function and class bodies.
- Do not remove empty newlines within a function. These exist for clarity and should be preserved.
- Don't suggest whitespace changes.
- Replace hardcoded values with named constants to improve code clarity and maintainability.

## Code Quality & Safety
- Always verify information before presenting it. Do not make assumptions or speculate without clear evidence.
- Pay attention to preserving existing structures. Don't remove unrelated code or functionalities.
- Implement robust error handling and logging where necessary.
- Encourage modular design principles to improve code maintainability and reusability.
- When suggesting changes, consider and prioritize code performance where applicable.
- Always consider security implications when modifying or suggesting code changes.
- Ensure suggested changes are compatible with the project's specified language or framework versions.
- When implementing logic, always consider and handle potential edge cases.
- Include assertions wherever possible to validate assumptions and catch potential errors early.

## Testing
- Suggest or include appropriate unit tests for new or modified code.
- Ensure test coverage for all new/changed code.

## Context Awareness
- Remember to check the context generated file for the current file contents and implementations.
